;*******************
;*                 *
;* SPEEDSCRIPT:    *
;*                 *
;*       D:SPEED.0 *
;*                 *
;*******************

; Locations used by high-speed memory move
; routines.
FROML = $80
FROMH = $81
DESTL = $82
DESTH = $83
LLEN  = $84
HLEN  = $85

; CURR: Position of cursor within text memory. SCR:
; used by the REFRESH routine.
CURR = $86
SCR  = $88

; TEX: An alternate location used in tandem with
; CURR. COLR is used by REFRESH. TEMP is used
; throughout as a scratchpad pointer. INDIR is also
; a reusable indirect pointer. UNDERCURS stores the
; value of the character highlighted by the cursor.
TEX       = $8A
TEMP      = $8C
INDIR     = $8E
UNDERCURS = $90

; WINDCOLOR: Color of command line window supported
; by HIGHLIGHT. RETCHAR is the screen-code value of
; the return-mark (a left-pointing arrow). SPACE is
; the screen-code value of the space character, RED
; and BLUE are used as command-line colors
WINDCOLR = $91
RETCHAR  = 94
SPACE    = 0
RED      = $32
BLUE     = $74

; Input/Output Control System definitions for
; input/output control blocks (IOCBs). CIO is the
; entry point for all file-oriented input/output.
; SHFLOK is the SHiFtLOcK flag.
ICCOM  = $0342
ICBADR = $0344
ICBLEN = $0348
ICAUX1 = $034A
ICAUX2 = $034B
ICSTAT = $0343
SHFLOK = $02BE
CIO    = $E456

; Location $1F00 is safely above DOS 2.0S, DOS 3,
; and OS/A+ DOS. Some DOS's may use more memory, so
; you may need to reassemble SpeedScript at a
; higher address, usually the address of LOMEM plus
; 256 bytes to be safe.
MEMSTART = $1F00
PRBUFF   = MEMSTART		; Printer line buffer
CHSET    = MEMSTART+$100	; Character set (must be aligned to 512 bytes)
MEMCOPY  = CHSET+$400		; Self-modifying code and variables

.IF .DEF CARTRIDGE
	*= $A000
.ELSE
	*= CHSET
.ENDIF

CHSET_ .INCLUDE chset.m65

; Called only when run from DOS. It is assumed that
; the author's initials (that conveniently work out
; in hex) are not normally present in memory. If
; they are, we know that SpeedScript has been run
; before, so we avoid the ERASE routine to preserve
; the text in memory.
BEGIN LDA 710
	STA 709
.IF .NOT .DEF CARTRIDGE
	JSR INIT
.ENDIF
	LDA #$CB
	CMP FIRSTRUN
	STA FIRSTRUN
.IF .DEF CARTRIDGE
	BNE DOINIT
	JMP JDOS
DOINIT JSR INIT
.ELSE
	BEQ SKIPERAS
.ENDIF
	JSR ERASE
	JSR KILLBUFF
	LDA #8
	STA SCRCOL
	LDA #2
	STA TEXCOLR
.IF .NOT .DEF CARTRIDGE
	; TODO: handle cassette boot
	LDA $0C
	STA JDOS+1
	LDA $0D
	STA JDOS+2
	LDA # <JDOS
	STA $0C
	LDA # >JDOS
	STA $0D
	LDA #0
	STA 580
	LDA #1
	STA $09
.ELSE
	JSR RAMCOPY
.ENDIF
SKIPERAS JSR INIT2
	JMP MAIN

	.INCLUDE speed1.m65
	.INCLUDE support.m65
	.INCLUDE dospak.m65
	.INCLUDE speed2.m65
	.INCLUDE data.m65
