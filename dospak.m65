; DOSPAK is a self-contained substitute
; for the DOS menu, although it uses
; several routines built into
; SpeedScript. The concept of DOSPAK is
; that all directory entries should fit
; on one screen. A large cursor is used
; to move from filename to filename. At
; any time, you can delete, rename, lock,
; unlock, or load the selected filename,
; just by pressing one key, or a CTRL key
; combination. Except for Rename, you
; don't have to type the filename. You
; can also format the entire disk or
; redisplay the directory.

; CATALOG fits the entire disk directory
; onto the screen by skipping over the
; sector counts, trimming up spacing, and
; placing three items per line. The
; cursor position of each filename is
; saved into a slot in memory so that the
; cursor routine can quickly and easily
; skip about.
CATALOG JSR CLOSE7
	LDX #$70
	LDA # <DIRNAME
	STA ICBADR,X
	LDA # >DIRNAME
	STA ICBADR+1,X
	LDA #5
	STA ICBLEN,X
	LDA #0
	STA ICBLEN+1,X
	LDA #6
	STA ICAUX1,X
	LDA #3
	STA ICCOM,X
	JSR CIO
	BMI CLOSE7
	LDA #0
	STA XPTR
REDIR LDX XPTR
	LDA $64
	STA SLOT,X
	LDA $65
	STA SLOT+1,X
	INC XPTR
	INC XPTR
	JSR GET7
	BMI CLOSE7
	CMP #'*+1
	BCS ENDIR
	JSR CHROUT
	JSR GET7
	BMI CLOSE7
	LDA #0
	STA DIRCOUNT
DIRLOOP JSR GET7
	BMI CLOSE7
DNOTCR JSR CHROUT
	INC DIRCOUNT
	LDA DIRCOUNT
	CMP #8
	BNE DNOT8
	LDA #'.
	JSR CHROUT
	JMP DIRLOOP
DNOT8 CMP #11
	BNE DIRLOOP
	LDA #5
	STA TEMP
THROW5 JSR GET7
	DEC TEMP
	LDA TEMP
	BNE THROW5
	JMP REDIR
CLOSE7 LDX #$70
	LDA #12
	STA ICCOM,X
	JSR CIO
	LDX #$70
	LDY ICSTAT,X
	RTS
ENDIR PHA
	LDA #155
	JSR CHROUT
	PLA
	JSR CHROUT
ENDLP JSR GET7
	BMI CLOSE7
	JSR CHROUT
	JMP ENDLP
GET7 LDX #$70
	LDA #0
	STA ICBLEN,X
	STA ICBLEN+1,X
	LDA #7
	STA ICCOM,X
	JMP CIO

; The main DOS routine calls the CATALOG
; routine to fill the screen with
; filenames, then puts the cursor on the
; current filename, waiting for a
; keypress.
DOS JSR DELITE
	JSR OPENEDITOR
	JSR DELITE
	LDA #1
	STA 752
	STA 82
	LDA #125
	JSR CHROUT
	JSR CATALOG
	JSR DOSMSG
GETNAME LDA SLOT
	STA SCR
	LDA SLOT+1
	STA SCR+1
	LDA #0
	STA XSLOT
	DEC XPTR
	DEC XPTR
NAMELP JSR INVNAME
	JSR GETAKEY
	LDX #1
	STX 752
	; Now that we've got a keypress, we look
	; it up in the keypress table, then
	; vector to the appropriate routine. This
	; is the same ML ON-GOTO routine that
	; we've used in several places in
	; SpeedScript, including the CONTROL
	; routine.
	LDX DOSTABLE
	CMP #97
	BCC NOPROB
	AND #95
NOPROB STA TEMP
FINDIT CMP DOSTABLE,X
	BEQ FOUNDIT
	DEX
	BNE FINDIT
	JMP JNAME
FOUNDIT DEX
	TXA
	ASL A
	TAX
	LDA DOSADR+1,X
	PHA
	LDA DOSADR,X
	PHA
	RTS

DOSTABLE .BYTE 15
	.BYTE "RLUF1234"

DOSADR .WORD DLEFT-1,DRIGHT-1,DUP-1,DDOWN-1,DELFILE-1,RENAME-1
	.WORD LOCK-1,UNLOCK-1,FORMAT-1,DRIVE-1,DRIVE-1,DRIVE-1
	.WORD DRIVE-1,ESCDOS-1,LOADIT-1

; Move bar cursor left by decrementing
; slot pointer.
DLEFT JSR INVNAME
	LDX XSLOT
	BEQ NRANGE
	DEX
	DEX
	JMP RESLOT

; Move bar cursor right by incrementing
; slot pointer.
DRIGHT JSR INVNAME
	LDX XSLOT
	INX
	INX
	CPX XPTR
	BCS NRANGE
	; Store new slot index.
RESLOT STX XSLOT
	LDA SLOT,X
	STA SCR
	LDA SLOT+1,X
	STA SCR+1
NRANGE JMP NAMELP

; Move bar cursor up by subtracting 6
; from the slot pointer (each slot is two
; bytes).
DUP JSR INVNAME
	LDA XSLOT
	CMP #6
	BCC NRANGE
	SEC
	SBC #6
	TAX
	JMP RESLOT

; Move bar cursor down by adding 6 to
; the slot pointer.
DDOWN JSR INVNAME
	LDA XSLOT
	CLC
	ADC #6
	CMP XPTR
	BCS NRANGE
	TAX
	JMP RESLOT

; This routine turns a filename pointed
; to by the bar cursor into a legal CIO
; filename, complete with Dx: and legal
; extension.
NAMER LDX #0
COPYD LDA DIRNAME,X
	STA FNBUFF,X
	INX
	CPX #3
	BNE COPYD
	LDY #1
COPYNAME LDA (SCR),Y
	AND #127
	JSR INTOAS
	CMP #32
	BEQ NOSTOR
	STA FNBUFF,X
	INX
NOSTOR INY
	CPY #13
	BNE COPYNAME
	LDA FNBUFF-1,X
	CMP #'.
	BNE NOTDOT
	DEX
NOTDOT STX FNLEN
	LDA #0
	STA FNBUFF,X
	RTS

; This routine passes any CIO command
; along with a formed filename.
XIO LDX #$70
	STA ICCOM,X
	LDA FNLEN
	STA ICBLEN,X
	LDA #0
	STA ICBLEN+1,X
	LDA # <FNBUFF
	STA ICBADR,X
	LDA # >FNBUFF
	STA ICBADR+1,X
	JMP CIO

; The DOS functions are quite short.
; NAMER builds the name; then we simply
; pass the number of the DOS CIO function
; unto XIO. If there's no error, we
; return to waiting for the next
; keystroke; otherwise, print the DOS
; error message and wait for a keystroke.
DELFILE JSR NAMER
	LDA #33

; Jump to the XIO routine.
GOXIO JSR XIO
	BPL JNAME
	JMP DOSERR
JNAME JSR INVNAME
	JMP NAMELP

; Lock a file.
LOCK JSR NAMER
	LDA #35
	JMP GOXIO

; Unlock a file.
UNLOCK JSR NAMER
	LDA #36
	JMP GOXIO

; We ask for the new name of the file,
; build the rename string, then jump to
; the XIO routine.
RENAME JSR BOTCLR
	LDA # <RENMSG
	LDY # >RENMSG
	JSR PRMSG
	LDA #64
	STA $02BE
	JSR INPUT
	LDA #0
	STA $02BE
	LDA INLEN
	BEQ NONAME
	JSR NAMER
	LDX #0
	LDY FNLEN
	LDA #',
	STA FNBUFF,Y
	INY
COPYR LDA INBUFF,X
	STA FNBUFF,Y
	INY
	INX
	CPX INLEN
	BNE COPYR
	STY FNLEN
	LDA #0
	STA FNBUFF,Y
	JSR DOSMSG
	LDA #32
	JMP GOXIO
NONAME JSR DOSMSG
	JMP JNAME

; Format routine. We use YORN to affirm
; this operation, which erases an entire
; disk. BOTCLR clears the bottom line of
; the screen.
FORMAT JSR BOTCLR
	LDA # <FORMSG
	LDY # >FORMSG
	JSR PRMSG
	JSR YORN
	BNE NONAME
	JSR DOSMSG
	JSR NAMER
	LDA #254
	JMP GOXIO

; Select new drive number and redisplay
; directory.
DRIVE LDA TEMP
	STA DIRNAME+1
	JMP DOS

; The Load-from-directory routine opens
; the file, then jumps into the SpeedScript
; Load routine.
LOADIT LDX #$70
	STX IOCB
	LDA #4
	STA ICAUX1,X
	LDA #0
	STA INDIR
	STA INDIR+1
	JSR NAMER
	; Command 3 is for OPEN file.
	LDA #3
	JSR XIO
	BMI DOSERR
	JSR ERASE
	JSR LOADLINK
	; If the load ended with an error, we
	; display the error; otherwise, we exit
	; the DOSPAK at ESCDOS.
	BMI DOSERR
	; The ESCape DOS routine clears the
	; stack, clears the screen, reenables the
	; display-list interrupt, prints the
	; "SpeedScript" message, then jumps back
	; to the editing loop.
ESCDOS LDX #$FA
	TXS
	LDA #125
	JSR CHROUT
	JSR HIGHLIGHT
	JSR SYSMSG
	JMP MAIN

; BOTCLR erases the bottom two lines of
; the screen by positioning the cursor on
; the next-to-the-last line, then
; printing two INSERT LINE characters
; that push any text on these lines off
; the bottom of the screen. Nifty, eh?
BOTCLR LDA #22
	STA 84
	LDA #157
	JSR CHROUT
	JMP CHROUT

; This is the error routine for the
; DOSPAK. We print "ERROR #", then print
; the error number with OUTNUM, a bell
; character (actually sounds like an
; annoying buzzer, appropriate Pavlovian
; treatment), then "Press RETURN." We
; wait for a keystroke, then return to
; getting keys for the DOSPAK commands.
DOSERR STY YSAVE
	JSR CLOSE7
	JSR BOTCLR
	LDA # <ERRMSG
	LDY # >ERRMSG
	JSR PRMSG
	LDX YSAVE
	LDA #0
	JSR OUTNUM
	LDA #253
	JSR CHROUT
	LDA # <DIRMSG
	LDY # >DIRMSG
	JSR PRMSG
	JSR GETAKEY
	JSR DOSMSG
	JMP JNAME

; Inverse the filename field of the
; currently selected filename. Used to
; create the bar cursor.
INVNAME LDY #12
INVLP LDA (SCR),Y
	EOR #128
	STA (SCR),Y
	DEY
	BPL INVLP
	RTS

; DOSMSG erases the bottom line of the
; screen and prints the DOSPAK command
; line, an abbreviated menu.
DOSMSG JSR BOTCLR
	LDA # <DIRINS
	LDY # >DIRINS
	JSR PRMSG
	LDA DIRNAME+1
	JMP CHROUT
