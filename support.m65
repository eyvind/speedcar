; This module supports most primitive
; input/output functions, including a
; routine to clear the screen and reset
; the screen editor (OPENEDITOR), print a
; character (CHROUT), and get a key from
; the keyboard (GETAKEY).

OPENEDITOR LDX #0
	LDA #12
	STA ICCOM
	JSR CIO
	LDX #0
	LDA # <ENAME
	STA ICBADR
	LDA # >ENAME
	STA ICBADR+1
	LDA #2
	STA ICBLEN
	STX ICBLEN+1
	LDA #3
	STA ICCOM,X
	JMP CIO

; Put the ATASCII value of the character
; into the accumulator and call CHROUT
; to print a character. The Y register is
; preserved. We call CIO with a buffer
; length of zero.
CHROUT STY CHRYSAVE
	LDX #0
	STX ICBLEN
	STX ICBLEN+1
	STX $02FF
	LDY #11
	STY ICCOM
	JSR CIO
	LDY CHRYSAVE
	RTS

; The filename of the Editor device.
ENAME .BYTE "E:"

; OUTNUM and PROUTNUM print decimal
; numbers to the display or printer. The
; integer to be printed is passed with
; the low byte in the X register and the
; high byte in the accumulator. The
; integer to floating-point routine
; ($D9AA) is called first, followed by
; floating-point to ATASCII routine,
; which creates a string of ATASCII
; digits. The last digit of the number
; has bit 7 set, which we use to
; terminate printing.
PROUTNUM LDY #128
	JMP OVERZAP
OUTNUM LDY #0
OVERZAP STY WHICHFLAG
	STX $D4
	STA $D5
	JSR $D9AA
	JSR $D8E6
	LDY #0
ONUMLOOP LDA ($F3),Y
	PHA
	AND #$7F
	BIT WHICHFLAG
	BMI GOPCHR
	JSR CHROUT
	JMP OVERPCHR
GOPCHR JSR PCHROUT
OVERPCHR PLA
	BMI ONUMEXIT
	INY
	BNE ONUMLOOP
ONUMEXIT RTS

; The system keyboard fetch routine
; interferes with the display-list
; interrupt, since the blip of each key
; is timed with WSYNC, which freezes the
; ANTIC chip for one line. This causes
; annoying flicker. This routine uses
; POKEY sound decaying from volume 15 to
; 0 for the keyboard feedback tone. It's
; not hard to create any sound effect you
; want for the keyboard blip. This
; routine mimics the system routine
; fairly closely. It's easy to expand it
; to allow many more keyboard functions
; and full processing of new keystrokes
; just by changing some of this code and
; the keyboard table.
GETIN LDA 764
	CMP #$FF
	BNE GETCHAR
	LDA #0
	RTS
GETCHAR LDA 764
	CMP #$FF
	BEQ GETCHAR
	STA KEYVAL
	LDA #$FF
	STA 764
	; Clear break flag.
	STA $11
	JSR BLIP
	LDA KEYVAL
	; Check for SHIFT+CTRL.
	CMP #$C0
	BCS GXIT
	AND #63
	CMP #60
	BNE NOTCAPS
	LDA KEYVAL
	AND #64
	BEQ NOTSET
	STA SHFLOK
GXIT LDA #0
	RTS

; The CAPS/LOWR key toggles the SHiFtLOcK
; flag to allow either only uppercase, or
; both uppercase and lowercase.
NOTSET LDA SHFLOK
	EOR #64
	STA SHFLOK
	LDA #0
	RTS
NOTCAPS LDX KEYVAL
	LDA KEYBOARD,X
	BIT SHFLOK
	BVC NOTLOCKED
	CMP #'a
	BCC NOTLOCKED
	CMP #'z+1
	BCS NOTLOCKED
	AND #223
NOTLOCKED CMP #$80
	BEQ GXIT
	RTS

; The sound effect for the keyboard
; "blip."
BLIP PHA
	LDA #50
	STA $D200
	LDX #$AF
SNDLOOP STX $D201
	LDY #128
SLOW DEY
	BNE SLOW
	DEX
	CPX #$9F
	BNE SNDLOOP
	PLA
	RTS

KEYBOARD .BYTE 108,106,59,128,128,107
	.BYTE 43,42,111,128,112,117
	.BYTE 155,105,45,61,118,128
	.BYTE 99,128,128,98,120,122
	.BYTE 52,128,51,54,27,53
	.BYTE 50,49,44,32,46,110
	.BYTE 128,109,47,$80,114,128
	.BYTE 101,121,127,116,119,113
	.BYTE 57,128,48,55,126,56
	.BYTE 60,62,102,104,100,128
	.BYTE 130,103,115,97,76,74
	.BYTE 58,128,128,75,92,94
	.BYTE 79,128,80,85,155,73
	.BYTE 95,124,86,128,67,128
	.BYTE 128,66,88,90,36,128
	.BYTE 35,38,27,37,34,33
	.BYTE 91,32,93,78,128,77
	.BYTE 63,$80,82,128,69,89
	.BYTE 159,84,87,81,40,128
	.BYTE 41,39,156,64,125,157
	.BYTE 70,72,68,128,131,71
	.BYTE 83,65,12,10,123,128
	.BYTE 128,11,30,31,15,128
	.BYTE 16,21,155,9,28,29
	.BYTE 22,128,3,128,128,2
	.BYTE 24,26,128,128,133,128
	.BYTE 27,128,253,128,0,32
	.BYTE 96,14,128,13,128,$80
	.BYTE 18,128,5,25,158,20
	.BYTE 23,17,128,128,128,128
	.BYTE 254,128,125,255,6,8
	.BYTE 4,128,132,7,19,1
